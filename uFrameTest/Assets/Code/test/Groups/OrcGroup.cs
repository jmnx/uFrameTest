// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace test {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    
    
    public partial class OrcGroup : ReactiveGroup<Orc> {
        
        private IEcsComponentManagerOf<SwordComp> _SwordCompManager;
        
        private IEcsComponentManagerOf<HealthComp> _HealthCompManager;
        
        private IEcsComponentManagerOf<ShieldComp> _ShieldCompManager;
        
        private int lastEntityId;
        
        private SwordComp SwordComp;
        
        private HealthComp HealthComp;
        
        private ShieldComp ShieldComp;
        
        public IEcsComponentManagerOf<SwordComp> SwordCompManager {
            get {
                return _SwordCompManager;
            }
            set {
                _SwordCompManager = value;
            }
        }
        
        public IEcsComponentManagerOf<HealthComp> HealthCompManager {
            get {
                return _HealthCompManager;
            }
            set {
                _HealthCompManager = value;
            }
        }
        
        public IEcsComponentManagerOf<ShieldComp> ShieldCompManager {
            get {
                return _ShieldCompManager;
            }
            set {
                _ShieldCompManager = value;
            }
        }
        
        public override System.Collections.Generic.IEnumerable<UniRx.IObservable<int>> Install(uFrame.ECS.APIs.IComponentSystem componentSystem) {
            SwordCompManager = componentSystem.RegisterComponent<SwordComp>();
            yield return SwordCompManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return SwordCompManager.RemovedObservable.Select(_=>_.EntityId);;
            HealthCompManager = componentSystem.RegisterComponent<HealthComp>();
            yield return HealthCompManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return HealthCompManager.RemovedObservable.Select(_=>_.EntityId);;
            ShieldCompManager = componentSystem.RegisterComponent<ShieldComp>();
            yield return ShieldCompManager.CreatedObservable.Select(_=>_.EntityId);;
            yield return ShieldCompManager.RemovedObservable.Select(_=>_.EntityId);;
        }
        
        public override bool Match(int entityId) {
            lastEntityId = entityId;
            if ((SwordComp = SwordCompManager[entityId]) == null) {
                return false;
            }
            if ((HealthComp = HealthCompManager[entityId]) == null) {
                return false;
            }
            if ((ShieldComp = ShieldCompManager[entityId]) == null) {
                return false;
            }
            return true;
        }
        
        public override Orc Select() {
            var item = new Orc();;
            item.EntityId = lastEntityId;
            item.SwordComp = SwordComp;
            item.HealthComp = HealthComp;
            item.ShieldComp = ShieldComp;
            return item;
        }
    }
}
